{"version":3,"sources":["utils/time.js","components/Countup/index.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["getCountUpValues","then","moment","HTML5_FMT","DATETIME_LOCAL_SECONDS","now","countdown","days","format","hours","minutes","seconds","Title","createTimeArray","currTime","isEmpty","label","num","Math","floor","interval","Countup","useState","time","setTime","timeoutHandler","setTimeout","useEffect","clearTimeout","style","paddingTop","gutter","justify","span","align","level","map","val","idx","key","xs","sm","offset","md","lg","xl","width","type","percent","ceil","Header","Content","Footer","Sider","Home","collapsed","setCollapsed","minHeight","collapsible","onCollapse","theme","defaultSelectedKeys","mode","Item","ClockCircleOutlined","className","padding","margin","textAlign","App","title","basename","window","location","pathname","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01afb498.chunk.js","sourcesContent":["import moment from 'moment'\n\nexport const getCountUpValues = () => {\n  const then = moment('2020-03-15T00:00:00', moment.HTML5_FMT.DATETIME_LOCAL_SECONDS)\n  const now = moment()\n\n  const countdown = moment(now - then)\n  const days = countdown.format('D')\n  const hours = countdown.format('HH')\n  const minutes = countdown.format('mm')\n  const seconds = countdown.format('ss')\n\n  return { seconds, minutes, hours, days }\n}\n","import React, { useState, useEffect } from 'react'\nimport { Row, Col, Typography, Progress } from 'antd'\nimport isEmpty from 'lodash/isEmpty'\nimport { getCountUpValues } from '../../utils/time'\n\nconst { Title } = Typography\nconst createTimeArray = ({ currTime }) => {\n  if (isEmpty(currTime)) {\n    return []\n  }\n  return [\n    { label: 'WEEK', num: Math.floor(currTime.days / 7), interval: 52 },\n    { label: 'DAY', num: currTime.days % 7, interval: 7 },\n    { label: 'HOUR', num: currTime.hours, interval: 24 },\n    { label: 'MINUTE', num: currTime.minutes, interval: 60 },\n    { label: 'SECOND', num: currTime.seconds, interval: 60 },\n  ]\n}\n\nexport default function Countup() {\n  const [time, setTime] = useState(createTimeArray({ currTime: getCountUpValues() }))\n  const isPlural = num => {\n    return num > 1\n  }\n\n  const timeoutHandler = setTimeout(() => {\n    const currTime = getCountUpValues()\n    setTime(createTimeArray({ currTime }))\n  }, [1000])\n\n  useEffect(() => {\n    return () => clearTimeout(timeoutHandler)\n  }, [timeoutHandler])\n  return (\n    <div style={{ paddingTop: '24px' }}>\n      <Row gutter={[0, 40]} justify=\"center\">\n        <Col span={24}>\n          <Title align=\"center\" level={1}>\n            I entered quarantine:\n          </Title>\n        </Col>\n      </Row>\n      <Row gutter={[0, 40]} align=\"middle\" justify=\"center\">\n        {time.map((val, idx) => {\n          return (\n            <Col\n              key={idx}\n              xs={{ span: 24 }}\n              sm={{ span: 8, offset: idx === 0 ? 4 : 0 }}\n              md={{ span: 8, offset: idx === 0 ? 4 : 0 }}\n              lg={{ span: 4, offset: idx === 0 ? 2 : 0 }}\n              xl={{ span: 4, offset: idx === 0 ? 2 : 0 }}\n            >\n              <Progress\n                width=\"150px\"\n                type=\"circle\"\n                percent={(val.num / val.interval) * 100}\n                format={percent =>\n                  `${Math.ceil((percent / 100) * val.interval)} ${val.label}${\n                    isPlural(val.num) ? 'S' : ''\n                  }`\n                }\n              />\n            </Col>\n          )\n        })}\n      </Row>\n      <Row gutter={[0, 40]}>\n        <Col span={24}>\n          <Title align=\"center\" level={1}>\n            ago...\n          </Title>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Layout, Menu } from 'antd'\nimport { ClockCircleOutlined } from '@ant-design/icons'\nimport Countup from './components/Countup'\n\nconst { Header, Content, Footer, Sider } = Layout\n\nexport default function Home() {\n  const [collapsed, setCollapsed] = useState(true)\n\n  const onCollapse = () => {\n    setCollapsed(!collapsed)\n  }\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\n        <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n          <Menu.Item key=\"1\">\n            <ClockCircleOutlined /> <span>Option 1</span>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n        <Content style={{ margin: '0 16px' }}>\n          <Countup />\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>WHEN WILL THIS END</Footer>\n      </Layout>\n    </Layout>\n  )\n}\n","import React from 'react'\nimport { Route, Switch, BrowserRouter } from 'react-router-dom'\nimport Home from './Home'\n\nfunction App() {\n  return (\n    <div title=\"countup-quaratine\">\n      <BrowserRouter basename={window.location.pathname || ''}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}